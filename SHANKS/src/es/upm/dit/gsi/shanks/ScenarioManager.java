package es.upm.dit.gsi.shanks;


/**
 * SecenarioManager class
 * 
 * This class generate the possibles errors
 * 
 * @author Daniel Lara
 * @version 0.1
 * 
 */


import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;


import sim.engine.SimState;
import sim.engine.Steppable;
import sim.portrayal.DrawInfo2D;
import sim.portrayal.SimplePortrayal2D;
import sim.util.Int2D;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : SE4ND
//  @ File Name : ScenarioManager.java
//  @ Date : 24/10/2011
//  @ Author : Daniel Lara
//
//

public class ScenarioManager implements Steppable{


		public Logger log = Logger.getLogger(this.getClass().toString());
	
		private static final long serialVersionUID = -7448202235281457216L;
		public static Scenarios scenario;
		public List<Device> faildevices = new ArrayList<Device>();
		public List<Device> totaldevice = new ArrayList<Device>();
		public static DeviceErrors dev;
		public static int totalproblems = 0;
		
		public ScenarioManager(Scenarios scenario){
			this.log.setLevel(Level.ALL);
			this.scenario = scenario;
		}
		
		//Get the devices from scenario
		public List<Device> getDeviceFromScenario(){
			return Model.ftth;
		}
		
		
		// Get all the device that are broken
		public List<Device> getFailureDevice(){
			
			log.fine("-> getFailureDevice()");
			
			totaldevice = getDeviceFromScenario();
			System.out.println("NUMERO DEVICES EN ESCENARIO : " + totaldevice.size());
			System.out.println("DEVICES " + totaldevice.toString());
			
			//Make a list with the broken devices
			for(int i=0; i < totaldevice.size(); i++){
				if(totaldevice.get(i).getStatus() == 1){
					faildevices.add(totaldevice.get(i));
				}
			}
			
			if(faildevices.isEmpty()){
				System.out.println("TODO CORRECTO");
			}else{
				for(int j = 0; j < faildevices.size(); j++){
					System.out.println("FALLO EN: " + faildevices.get(j).getID());
				}
				
			}
			return faildevices;
		}
		
		
		//Repair all device putting their status at HEALTHY_STATUS
		private void repairAllDevice(){
			for(Device d : this.faildevices){
				d.setStatus(Definitions.HEALTHY_STATUS);
			}
			faildevices.clear();
		}
		
		public static void generateProblem(){
			int randomproblem = (int) (Math.random()*DeviceErrors.deverrors.size());
			double randomerrorgenerator = Math.random();
			if(randomerrorgenerator < Model.PROB_BROKEN){
				dev = DeviceErrors.deverrors.get(randomproblem);
				dev.setTrigger(true);
				System.out.println("ERROR " + dev.getName());
				Model.elements.setObjectLocation(dev, Model.gridWidth-75, 50);
				totalproblems++;
			}else if(randomerrorgenerator > Model.PROB_BROKEN){
				DeviceErrors noproblem = new DeviceErrors ("No problem", true);
				dev = noproblem;
				Model.elements.setObjectLocation(dev, Model.gridWidth-75, 50);
			}
		}
		
		public void repairProblems(){
			for(DeviceErrors d : DeviceErrors.deverrors){
				d.setTrigger(false);
			}
		}
		
		//The actions done by the agent for each step
		public void step(SimState state){
			repairAllDevice();
			repairProblems();
			System.out.println("NUEVA PRUEBA");
			Model model = (Model)state;
			switch(model.selectError()){
			case 0:
				model.setBrokenStatus();
				break;
			case 1:
				generateProblem();
				DeviceErrors.setDeviceWithProblems();
				break;
			}
			System.out.println("");
			getFailureDevice();
	     	System.out.println(" ");
	     	System.out.println(" "); 	
	     	System.out.println("DEVICE CLEAR: " + faildevices.toString());
	     	System.out.println("PROBLEMAS TOTALES: " + totalproblems);
		}
	}

