package es.upm.dit.gsi.shanks.notification;

import java.util.List;

import es.upm.dit.gsi.shanks.model.event.OneShotEvent;
import es.upm.dit.gsi.shanks.model.event.PeriodicEvent;
import es.upm.dit.gsi.shanks.model.event.ProbabilisticEvent;

/**
 * From time to time the user may want to use data generated by the simulation,
 * to analyze and take conclusions.
 *    
 * A notification is a trace left by interactions of agents, elements and the 
 * environment. This trace can be consulted on simulation time or at the end 
 * of it. 
 * 
 * A notification store information of Events, cause in SHANKS all interactions
 * between two elements are defined by them. This information have a relational
 * entity with the form:
 * 
 *      source => interaction => target
 *  
 * In addition, a notification have three more keys: 
 * - An unique identification id
 * - A notification type that can be one between the number of types defined
 * on this class.
 * - A field that indicates the step number when the events was trigger.       
 * 
 * @author darofar
 *
 */
public class Notification {

    public static final String ONE_SHOOT_TYPE = "OneShoot";
    public static final String PERIODIC_TYPE = "Periodic";
    public static final String PROBABILISTIC_TYPE = "Probabilistic";
    
    /**
     * Notification ID generated by NotificationManager when the notification
     * is created. 
     */
    private String id;
    
    /**
     * Class that defines the type of event that describes the interaction.  
     */
    private Class<?> type = null;
    
    /**
     * Step number in which the interaction occurs. 
     */
    private long when = -1;
    
    /**
     * Interaction source object.   
     */
    private Object source;
    
    /**
     * Class that define the interaction itself. 
     */
    private Class<?> interaction;
    
    /**
     * Interaction target objects.
     */
    private List<Object> target;

    @SuppressWarnings("unused")
    private Notification() {
    }

    /**
     * @param id
     * @param type
     * @param when
     * @param source
     * @param interaction
     * @param target
     */
    public Notification(String id, Class<?> type, long when, Object source,
            Class<?> interaction, List<Object> target) {
        this.id = id;
        this.type = type;
        this.when = when;
        this.source = source;
        this.interaction = interaction;
        this.target = target;
    }

    /**
     * @param id
     * @param source
     * @param interaction
     * @param target
     */
    public Notification(String id, Object source, Class<?> interaction,
            List<Object> target) {
        this.id = id;
        this.source = source;
        this.interaction = interaction;
        this.target = target;
        if (interaction.isAssignableFrom(OneShotEvent.class)) {
            this.type = OneShotEvent.class;
        } else if (interaction.isAssignableFrom(ProbabilisticEvent.class)) {
            this.type = ProbabilisticEvent.class;
        } else if (interaction.isAssignableFrom(PeriodicEvent.class)) {
            this.type = PeriodicEvent.class;
        } 
    }

//    /**
//     * @param id
//     * @param type
//     * @param source
//     * @param interaction
//     * @param target
//     */
//    public Notification(String id, Class<?> type, Object source,
//            Class<?> interaction, List<Object> target) {
//        this.id = id;
//        this.type = type;
//        this.source = source;
//        this.interaction = interaction;
//        this.target = target;
//    }

    /**
     * @param id
     * @param when
     * @param source
     * @param interaction
     * @param list
     */
    public Notification(String id, long when, Object source,
            Class<?> interaction, List<?> list) {
        this.id = id;
        this.when = when;
        this.source = source;
        this.interaction = interaction;
        this.target = (List<Object>) list;
        if (interaction.isAssignableFrom(OneShotEvent.class)) {
            this.type = OneShotEvent.class;
        } else if (interaction.isAssignableFrom(ProbabilisticEvent.class)) {
            this.type = ProbabilisticEvent.class;
        } else if (interaction.isAssignableFrom(PeriodicEvent.class)) {
            this.type = PeriodicEvent.class;
        } 
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id
     *            the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the type
     */
    public Class<?> getType() {
        return type;
    }

    /**
     * @param type
     *            the type to set
     */
    public void setType(Class<?> type) {
        this.type = type;
    }

    /**
     * @return the source
     */
    public Object getSource() {
        return source;
    }

    /**
     * @param source
     *            the source to set
     */
    public void setSource(Object source) {
        this.source = source;
    }

    /**
     * @return the interaction
     */
    public Class<?> getInteraction() {
        return interaction;
    }

    /**
     * @param interaction
     *            the interaction to set
     */
    public void setInteraction(Class<?> interaction) {
        this.interaction = interaction;
    }

    /**
     * @return the target
     */
    public List<Object> getTarget() {
        return target;
    }

    /**
     * @param target
     *            the target to set
     */
    public void setTarget(List<Object> target) {
        this.target = target;
    }

    /**
     * @return the step number in which the notification was created.
     */
    public long getWhen() {
        return when;
    }

    /**
     * @param when 
     *          the step number to set
     */
    public void setWhen(long when) {
        this.when = when;
    }

}
